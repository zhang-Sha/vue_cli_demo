"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _helperPluginUtils() {
  var data = require("@babel/helper-plugin-utils");

  _helperPluginUtils = function _helperPluginUtils() {
    return data;
  };

  return data;
}

function _presetStage() {
  var data = _interopRequireDefault(require("@babel/preset-stage-3"));

  _presetStage = function _presetStage() {
    return data;
  };

  return data;
}

function _pluginProposalFunctionSent() {
  var data = _interopRequireDefault(require("@babel/plugin-proposal-function-sent"));

  _pluginProposalFunctionSent = function _pluginProposalFunctionSent() {
    return data;
  };

  return data;
}

function _pluginProposalExportNamespaceFrom() {
  var data = _interopRequireDefault(require("@babel/plugin-proposal-export-namespace-from"));

  _pluginProposalExportNamespaceFrom = function _pluginProposalExportNamespaceFrom() {
    return data;
  };

  return data;
}

function _pluginProposalNumericSeparator() {
  var data = _interopRequireDefault(require("@babel/plugin-proposal-numeric-separator"));

  _pluginProposalNumericSeparator = function _pluginProposalNumericSeparator() {
    return data;
  };

  return data;
}

function _pluginProposalThrowExpressions() {
  var data = _interopRequireDefault(require("@babel/plugin-proposal-throw-expressions"));

  _pluginProposalThrowExpressions = function _pluginProposalThrowExpressions() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _helperPluginUtils().declare)(function (api, opts) {
  api.assertVersion(7);
  var loose = false;
  var useBuiltIns = false;

  if (opts !== undefined) {
    if (opts.loose !== undefined) loose = opts.loose;
    if (opts.useBuiltIns !== undefined) useBuiltIns = opts.useBuiltIns;
  }

  if (typeof loose !== "boolean") {
    throw new Error("@babel/preset-stage-2 'loose' option must be a boolean.");
  }

  if (typeof useBuiltIns !== "boolean") {
    throw new Error("@babel/preset-stage-2 'useBuiltIns' option must be a boolean.");
  }

  return {
    presets: [[_presetStage().default, {
      loose: loose,
      useBuiltIns: useBuiltIns
    }]],
    plugins: [_pluginProposalFunctionSent().default, _pluginProposalExportNamespaceFrom().default, _pluginProposalNumericSeparator().default, _pluginProposalThrowExpressions().default]
  };
});

exports.default = _default;